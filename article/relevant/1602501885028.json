{"relevantArticles":[{"articleTitle":"lua 热部署简版","articleAbstractText":"Why 我们在做lua开发的时候，一般的流程  写代码，Play Unity，到我们的功能，看看效果 发现又问题，修改代码 重新 Play，运行到我们的功能，看效果 循环2 - 3  有可改进的空间吗 lua支持热部署，不需要重启unity，重新打开该界面即可 关于热部署的核心技术点 1. 监听lua文件修改 写一个配置文件，标明哪些目录是被监听的，这部分使用unity的AssetPostprocess即可 当文件有修改，获得修改的文件路径 2. 放弃现有lua环境中已经加载过的cache 根据得到的路径，得到lua路径，并且 package.loaded['{requirePath}']=nil  3. 重新require require('{requirePath}')  PS 这里面包含的技术点  在Lua中使用require进行模块的加载，被成功加载的模块会将这个模块的引用保存到package.loaded表中；在使用require进行模块加载的时候，会首先在package.loaded表中查找，检测这个模块是否被加载过，如果被加载过则返回这个模块在package.loaded....","articleStatus":0,"articlePermalink":"/articles/2020/10/21/1603245912000.html","articleImg1URL":"https://b3logfile.com/bing/20200301.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"关于Unity Native插件的开发","articleAbstractText":"构建native库的意义  核心算法保密（例如随机算法，寻路算法等） 效率考量(c++库效率比C#要高一个数量级,即便是il2cpp也有极大差异) 跨端需求(例如战斗库，需要客户端和验证服双端一致运行)  目标  可以被用作Unity Plugin，供Unity Editor(Windows + Mac )使用 也可以编译为库文件，供移动端使用(Android + iOS)  准备工作  本文以Mac系统为例 安装Homebrew 安装CMake，一个跨平台的安装和编译工具，可以用简单的语句来描述所有平台的安装或编译过程 JDK SDK NDK这些可以使用Unity安装包内附带的 XCode Visual Studio  native插件的基本要素 1. 全局头文件Define.h，定义API，为了兼顾做Unity-Plugin和普通dll库，这里做一个宏定义判断(标准写法，全网通用) #pragma once // Unity native plugin API // Compatible with C99 #if defined(__CYGWIN32__) #define API ....","articleStatus":0,"articlePermalink":"/articles/2020/10/12/1602495480321.html","articleImg1URL":"https://b3logfile.com/file/2020/10/solofetchupload3770638779777146303-58a624a3.jpeg?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}
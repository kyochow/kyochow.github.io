{"relevantArticles":[{"articleTitle":"内存管理策略","articleAbstractText":"一个常见的内存管理策略  LEVEL-1 AssetBundle管理 LEVEL-2 Asset管理 LEVEL-3 实例管理(Pool管理)  各层之间的策略是如下的(每个人思路不同，或许略有差异，但总体相似)  逻辑层要一个对象的实例，调用Pool.Spawn(key)，例如创建一个npc路人甲 Pool管理层找这个key的实例池子，如果有，生成一个实例返回，如果没有，到Asset层请求Asset来构建这个key的Pool Asset管理层，查找自己有没有这个资源，有就返回，没有，到Bundle层去申请这个key的Asset，并返回 Bundle检查这个key属于哪个AssetBundle，如果AB已经加载了，从AB里Load这个Asset，如果AB没有加载，到磁盘上加载这个AB，然后再返回这个key的Asset  看起来思路是ok的，但我们不可能把所有的AB都加载到内存，那就必然涉及到加载AB和卸载AB，其中加载没什么好说的，需要的时候必须加载，那问题是：不用的bundle我们什么时候卸载掉呢？ 方案1 很自然的，我们就想到了引用计数策略：  给Lv1，Lv2，Lv3的每一层个每....","articleStatus":0,"articlePermalink":"/articles/2020/11/07/1604734756556.html","articleImg1URL":"https://b3logfile.com/bing/20200810.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}
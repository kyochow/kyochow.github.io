{"randomArticles":[{"articleTitle":"关于Unity Native插件的开发","articleAbstractText":"构建native库的意义  核心算法保密（例如随机算法，寻路算法等） 效率考量(c++库效率比C#要高一个数量级,即便是il2cpp也有极大差异) 跨端需求(例如战斗库，需要客户端和验证服双端一致运行)  目标  可以被用作Unity Plugin，供Unity Editor(Windows + Mac )使用 也可以编译为库文件，供移动端使用(Android + iOS)  准备工作  本文以Mac系统为例 安装Homebrew 安装CMake，一个跨平台的安装和编译工具，可以用简单的语句来描述所有平台的安装或编译过程 JDK SDK NDK这些可以使用Unity安装包内附带的 XCode Visual Studio  native插件的基本要素 1. 全局头文件Define.h，定义API，为了兼顾做Unity-Plugin和普通dll库，这里做一个宏定义判断(标准写法，全网通用) #pragma once // Unity native plugin API // Compatible with C99 #if defined(__CYGWIN32__) #define API ....","articleStatus":0,"articlePermalink":"/articles/2020/10/12/1602495480321.html","articleImg1URL":"https://b3logfile.com/file/2020/10/solofetchupload3770638779777146303-58a624a3.jpeg?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"拿一个很久之前的战斗系统架构图来充数","articleAbstractText":"","articleStatus":0,"articlePermalink":"/articles/2020/11/05/1604577037251.html","articleImg1URL":"https://b3logfile.com/file/2020/11/战斗系统架构-84e9875f.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"关于游戏加密","articleAbstractText":"说白了 本文主要讨论关于包体相关的加密，内存相关加密不在讨论，归根结底，游戏的加密，都只是仅仅提高了被破解的门槛而已，阻挡了一些新朋友使用各种工具提取游戏资源，修改游戏配置乃至代码，并寄希望于大神对我们的游戏没那么有兴趣，仅此而已 脚本加密 以Lua为例，很多游戏使用Lua作为逻辑开发语言，将lua打入AssetBundle或者zip包，进行热更，但这种情况真的太容易被破解了，常见的解决思路分如下几步 1. 使用luac对脚本进行编译 生成字节码，天然丧失阅读性，还带着一点点加速属性，这是入门级\"加密\"，算是一举两得，但是破解难度也是最低的，因为github上unluac之类的工具太多了，对于有一点编程基础的都可以反编译回来，通过修改再封包，就可以达到破解目的 2. 在luac的基础上，对编译出来的字节码进行二次加密 一般兼顾解码速度的话，会使用异或算法，这时候已经可以拦截大多数专业程序员了 3. 在1+2的基础上，强化加密工具库 将异或算法的工具，使用c来写native库，Key写在native库里，增加破解难度，好处是可以进一步速度加成，破解更难，但是通过汇编级别的静态代码调试还是....","articleStatus":0,"articlePermalink":"/articles/2020/10/12/1602501885028.html","articleImg1URL":"https://b3logfile.com/bing/20190406.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"关于界面栈系统","articleAbstractText":"概述 游戏内，关于界面的跳转逻辑，一般是有一定规则的，例如  从主界面 打开全屏界面A 打开弹出框B 关闭A和B后，打开C 关闭C，弹出A，再弹出B 关闭界面B 关闭界面A 打开主界面 打开副本界面中，点击某副本 弹出副本详情，点开战 关闭所有界面，进入战斗场景 等战斗结束，弹结算界面，清理战场 弹回之前的副本和详情界面，并恢复当时的状态  很啰嗦，但是这比较常见的流程，这里面有什么可以抽象出来的？可以达成什么目标？ 目标  开发者不需要特别关注打开一个界面时，后面的界面是个什么状态 开发者不需要特别关注在关闭一个界面的时候，该打开什么界面(除非有特殊跳转) 进战斗前，开发者不必每个人都记录当前打开的界面 出战斗后，开发者并不需要自己打开进战斗前的界面 但是，界面内的还原工作，还是需要每个人自己做  抽象 1.界面类别：  A级全屏界面 B级半屏界面 C级不重要的弹出界面(确认框，飘字等)  2.记录一个当前已经打开的Main层的界面queue(或list) standBy 3.记录一个当前已关闭的所有界面，用数据结构-栈，pageStack 4.根(Root)，定义HomePage为....","articleStatus":0,"articlePermalink":"/articles/2020/10/23/1603418345984.html","articleImg1URL":"https://b3logfile.com/bing/20180813.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}
{"randomArticles":[{"articleTitle":"内存管理策略","articleAbstractText":"一个常见的内存管理策略  LEVEL-1 AssetBundle管理 LEVEL-2 Asset管理 LEVEL-3 实例管理(Pool管理)  各层之间的策略是如下的(每个人思路不同，或许略有差异，但总体相似)  逻辑层要一个对象的实例，调用Pool.Spawn(key)，例如创建一个npc路人甲 Pool管理层找这个key的实例池子，如果有，生成一个实例返回，如果没有，到Asset层请求Asset来构建这个key的Pool Asset管理层，查找自己有没有这个资源，有就返回，没有，到Bundle层去申请这个key的Asset，并返回 Bundle检查这个key属于哪个AssetBundle，如果AB已经加载了，从AB里Load这个Asset，如果AB没有加载，到磁盘上加载这个AB，然后再返回这个key的Asset  看起来思路是ok的，但我们不可能把所有的AB都加载到内存，那就必然涉及到加载AB和卸载AB，其中加载没什么好说的，需要的时候必须加载，那问题是：不用的bundle我们什么时候卸载掉呢？ 方案1 很自然的，我们就想到了引用计数策略：  给Lv1，Lv2，Lv3的每一层个每....","articleStatus":0,"articlePermalink":"/articles/2020/11/07/1604734756556.html","articleImg1URL":"https://b3logfile.com/bing/20200810.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"lua 热部署简版","articleAbstractText":"Why 我们在做lua开发的时候，一般的流程  写代码，Play Unity，到我们的功能，看看效果 发现又问题，修改代码 重新 Play，运行到我们的功能，看效果 循环2 - 3  有可改进的空间吗 lua支持热部署，不需要重启unity，重新打开该界面即可 关于热部署的核心技术点 1. 监听lua文件修改 写一个配置文件，标明哪些目录是被监听的，其他项目可以使用FileSystemWatcher，但是unity项目比较简单，AssetPostprocess即可 当文件有修改，获得修改的文件路径 2. 放弃现有lua环境中已经加载过的cache 根据得到的路径，得到lua路径，并且 package.loaded['{requirePath}']=nil  3. 重新require require('{requirePath}')  PS 这里面包含的技术点  在Lua中使用require进行模块的加载，被成功加载的模块会将这个模块的引用保存到package.loaded表中；在使用require进行模块加载的时候，会首先在package.loaded表中查找，检测这个模块是否被加载过....","articleStatus":0,"articlePermalink":"/articles/2020/10/21/1603245912000.html","articleImg1URL":"https://b3logfile.com/bing/20181203.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"拿一个很久之前的战斗系统架构图来充数","articleAbstractText":"","articleStatus":0,"articlePermalink":"/articles/2020/11/05/1604577037251.html","articleImg1URL":"https://b3logfile.com/file/2020/11/战斗系统架构-84e9875f.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}
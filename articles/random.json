{"randomArticles":[{"articleTitle":"关于界面栈系统","articleAbstractText":"概述 游戏内，关于界面的跳转逻辑，一般是有一定规则的，例如  从主界面 打开全屏界面A 打开弹出框B 关闭A和B后，打开C 关闭C，弹出A，再弹出B 关闭界面B 关闭界面A 打开主界面 打开副本界面中，点击某副本 弹出副本详情，点开战 关闭所有界面，进入战斗场景 等战斗结束，弹结算界面，清理战场 弹回之前的副本和详情界面，并恢复当时的状态  很啰嗦，但是这比较常见的流程，这里面有什么可以抽象出来的？可以达成什么目标？ 目标  开发者不需要特别关注打开一个界面时，后面的界面是个什么状态 开发者不需要特别关注在关闭一个界面的时候，该打开什么界面(除非有特殊跳转) 进战斗前，开发者不必每个人都记录当前打开的界面 出战斗后，开发者并不需要自己打开进战斗前的界面 但是，界面内的还原工作，还是需要每个人自己做  抽象 1.界面类别：  A级全屏界面 B级半屏界面 C级不重要的弹出界面(确认框，飘字等)  2.记录一个当前已经打开的Main层的界面queue(或list) standBy 3.记录一个当前已关闭的所有界面，用数据结构-栈，pageStack 4.根(Root)，定义HomePage为....","articleStatus":0,"articlePermalink":"/articles/2020/10/23/1603418345984.html","articleImg1URL":"https://b3logfile.com/bing/20180813.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Lua加密更进一步","articleAbstractText":"Lua AST base crypt 该方案会直接修改lua库中luac和unluac相关的逻辑，这种方式会比文件加密有更复杂的加密逻辑，也增加破解难度 核心方法(包括但不限于，这里的String只是举例)  ldump.c中的DumpString lundump.c中的LoadString  他俩是成对的，如何的加密，就要对应的解密  static void DumpString (const TString *s, DumpState *D) { if (s == NULL) DumpByte(0, D); else { #if LUAC_COMPATIBLE_FORMAT uint32_t size = tsslen(s) + 1; #else size_t size = tsslen(s) + 1; /* include trailing '\\0' */ #endif char *str = getstr(s); if (size &lt; 0xFF) DumpByte(cast_int(size), D); else { DumpByte(0xFF, D); DumpVar(....","articleStatus":0,"articlePermalink":"/articles/2021/01/09/1610205205933.html","articleImg1URL":"https://b3logfile.com/bing/20190330.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"变换(Transformation)","articleAbstractText":"概述 学习渲染，不得不涉及到线性代数的部分，每次看书都很头疼，但实际上，我们不必面面俱到的掌握每一个细节，每一次推导，一些基础的概念优先掌握，至于推导，可以留在实际工作中用到了再推 常见的运算 向量 Vector 向量最基本的定义就是一个方向，但是也可以表示位置 标量 Scalar 从他的名字也能看出来，标量就是一个缩放值，是一个数值 矩阵 矩阵是代数工具，是加速解决向量问题的工具 向量与标量的运算 加减乘除都一样，单不符合交换律 $ \\begin{pmatrix} \\begin{matrix} \\color{red}1 \\\\ \\color{green} 2 \\\\ \\color{blue} 3 \\end{matrix}\\end{pmatrix} + x = \\begin{pmatrix}\\begin{matrix} \\color{red}1 + x \\\\ \\color{green}2 + x \\\\ \\color{blue}3 + x \\end{matrix}\\end{pmatrix} $ 向量与向量的运算 加法，减法，两个向量对应元素的加减运算 $\\bar{v} =\\begin{pma....","articleStatus":0,"articlePermalink":"/articles/2021/02/18/1613578720981.html","articleImg1URL":"https://b3logfile.com/bing/20201214.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"lua 热部署简版","articleAbstractText":"Why 我们在做lua开发的时候，一般的流程  写代码，Play Unity，到我们的功能，看看效果 发现又问题，修改代码 重新 Play，运行到我们的功能，看效果 循环2 - 3  有可改进的空间吗 lua支持热部署，不需要重启unity，重新打开该界面即可 关于热部署的核心技术点 1. 监听lua文件修改 写一个配置文件，标明哪些目录是被监听的，其他项目可以使用FileSystemWatcher，但是unity项目比较简单，AssetPostprocess即可 当文件有修改，获得修改的文件路径 2. 放弃现有lua环境中已经加载过的cache 根据得到的路径，得到lua路径，并且 package.loaded['{requirePath}']=nil  3. 重新require require('{requirePath}')  PS 这里面包含的技术点  在Lua中使用require进行模块的加载，被成功加载的模块会将这个模块的引用保存到package.loaded表中；在使用require进行模块加载的时候，会首先在package.loaded表中查找，检测这个模块是否被加载过....","articleStatus":0,"articlePermalink":"/articles/2020/10/21/1603245912000.html","articleImg1URL":"https://b3logfile.com/bing/20181203.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"程序员角度理解的Wwise","articleAbstractText":"Wwise概述  强大的游戏音频中间件 游戏程序员与音频艺术家解开耦合，各司其职 强大的混音台 较多的内存及CPU优化手段 内置的多语言支持 多平台支持，每个平台可以独立调整各种设置  程序员须要了解的 事件 Event  这是游戏引擎发送给Wwise引擎的Game Call，告诉wwise游戏内发生了某些事情，通常用来触发/停止声音，或者修改声音属性 两边的事件名称必须对应，对象名称不区分大小写  游戏同步 GameSync ，包括如下几个方面 1，开关 Switch  由游戏引擎发送，用来表示游戏内以条件来决定的情景，如：切换昼夜、地表类型等 使用切换开关组(Switch Group)来实现多选一，类似于游戏内的Toggle Group  2，参数控制 RTPC(Real Time Parameter Control)  一般表示游戏中在一定范围内连续变化的信息，例如背景音乐音量、音效音量控制 可以设置数值范围，又游戏引擎传入 例：第一人称游戏中，玩家血量越低，心跳声越剧烈  3，状态 State  可用于标识个体的状态，例如玩家状态，生存、死亡、陆地上、水中等等 个体处于不同状态....","articleStatus":0,"articlePermalink":"/articles/2021/02/01/1612112629626.html","articleImg1URL":"https://b3logfile.com/bing/20200524.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}
{"relevantArticles":[{"articleTitle":"关于界面栈系统","articleAbstractText":"概述 游戏内，关于界面的跳转逻辑，一般是有一定规则的，例如  从主界面 打开全屏界面A 打开弹出框B 关闭A和B后，打开C 关闭C，弹出A，再弹出B 关闭界面B 关闭界面A 打开主界面 打开副本界面中，点击某副本 弹出副本详情，点开战 关闭所有界面，进入战斗场景 等战斗结束，弹结算界面，清理战场 弹回之前的副本和详情界面，并恢复当时的状态  很啰嗦，但是这比较常见的流程，这里面有什么可以抽象出来的？可以达成什么目标？ 目标  开发者不需要特别关注打开一个界面时，后面的界面是个什么状态 开发者不需要特别关注在关闭一个界面的时候，该打开什么界面(除非有特殊跳转) 进战斗前，开发者不必每个人都记录当前打开的界面 出战斗后，开发者并不需要自己打开进战斗前的界面 但是，界面内的还原工作，还是需要每个人自己做  抽象 1.界面类别：  A级全屏界面 B级半屏界面 C级不重要的弹出界面(确认框，飘字等)  2.记录一个当前已经打开的Main层的界面queue(或list) standBy 3.记录一个当前已关闭的所有界面，用数据结构-栈，pageStack 4.根(Root)，定义HomePage为....","articleStatus":0,"articlePermalink":"/articles/2020/10/23/1603418345984.html","articleImg1URL":"https://b3logfile.com/bing/20180813.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}
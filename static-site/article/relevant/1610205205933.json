{"relevantArticles":[{"articleTitle":"程序员角度理解的Wwise","articleAbstractText":"Wwise概述  强大的游戏音频中间件 游戏程序员与音频艺术家解开耦合，各司其职 强大的混音台 较多的内存及CPU优化手段 内置的多语言支持 多平台支持，每个平台可以独立调整各种设置  程序员须要了解的 事件 Event  这是游戏引擎发送给Wwise引擎的Game Call，告诉wwise游戏内发生了某些事情，通常用来触发/停止声音，或者修改声音属性 两边的事件名称必须对应，对象名称不区分大小写  游戏同步 GameSync ，包括如下几个方面 1，开关 Switch  由游戏引擎发送，用来表示游戏内以条件来决定的情景，如：切换昼夜、地表类型等 使用切换开关组(Switch Group)来实现多选一，类似于游戏内的Toggle Group  2，参数控制 RTPC(Real Time Parameter Control)  一般表示游戏中在一定范围内连续变化的信息，例如背景音乐音量、音效音量控制 可以设置数值范围，又游戏引擎传入 例：第一人称游戏中，玩家血量越低，心跳声越剧烈  3，状态 State  可用于标识个体的状态，例如玩家状态，生存、死亡、陆地上、水中等等 个体处于不同状态....","articleStatus":0,"articlePermalink":"/articles/2021/02/01/1612112629626.html","articleImg1URL":"https://b3logfile.com/bing/20200524.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"内存管理策略","articleAbstractText":"一个常见的内存管理策略  LEVEL-1 AssetBundle管理 LEVEL-2 Asset管理 LEVEL-3 实例管理(Pool管理)  各层之间的策略是如下的(每个人思路不同，或许略有差异，但总体相似)  逻辑层要一个对象的实例，调用Pool.Spawn(key)，例如创建一个npc路人甲 Pool管理层找这个key的实例池子，如果有，生成一个实例返回，如果没有，到Asset层请求Asset来构建这个key的Pool Asset管理层，查找自己有没有这个资源，有就返回，没有，到Bundle层去申请这个key的Asset，并返回 Bundle检查这个key属于哪个AssetBundle，如果AB已经加载了，从AB里Load这个Asset，如果AB没有加载，到磁盘上加载这个AB，然后再返回这个key的Asset  看起来思路是ok的，但我们不可能把所有的AB都加载到内存，那就必然涉及到加载AB和卸载AB，其中加载没什么好说的，需要的时候必须加载，那问题是：不用的bundle我们什么时候卸载掉呢？ 方案1 很自然的，我们就想到了引用计数策略：  给Lv1，Lv2，Lv3的每一层个每....","articleStatus":0,"articlePermalink":"/articles/2020/11/07/1604734756556.html","articleImg1URL":"https://b3logfile.com/bing/20200810.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}
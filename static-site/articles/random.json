{"randomArticles":[{"articleTitle":"变换(Transformation)","articleAbstractText":"概述 学习渲染，不得不涉及到线性代数的部分，每次看书都很头疼，但实际上，我们不必面面俱到的掌握每一个细节，每一次推导，一些基础的概念优先掌握，至于推导，可以留在实际工作中用到了再推 常见的运算 向量 Vector 向量最基本的定义就是一个方向，但是也可以表示位置 标量 Scalar 从他的名字也能看出来，标量就是一个缩放值，是一个数值 矩阵 矩阵是代数工具，是加速解决向量问题的工具 向量与标量的运算 加减乘除都一样，单不符合交换律 $ \\begin{pmatrix} \\begin{matrix} \\color{red}1 \\\\ \\color{green} 2 \\\\ \\color{blue} 3 \\end{matrix}\\end{pmatrix} + x = \\begin{pmatrix}\\begin{matrix} \\color{red}1 + x \\\\ \\color{green}2 + x \\\\ \\color{blue}3 + x \\end{matrix}\\end{pmatrix} $ 向量与向量的运算 加法，减法，两个向量对应元素的加减运算 $\\bar{v} =\\begin{pma....","articleStatus":0,"articlePermalink":"/articles/2021/02/18/1613578720981.html","articleImg1URL":"https://b3logfile.com/bing/20201214.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"坐标系统(Coordinate System)","articleAbstractText":"概述 为了将坐标从一个坐标系变换到另一个坐标系，需要用到几个变换矩阵，最重要的几个分别是模型(Model)、观察(View)、投影(Projection)三个矩阵。另外几个常见的概念  局部空间(Local Space，或者称为物体空间(Object Space)) 世界空间(World Space) 观察空间(View Space，或者称为视觉空间(Eye Space)) 裁剪空间(Clip Space) 屏幕空间(Screen Space)  下面的这张图展示了整个流程以及各个变换过程做了什么  Local Coordinate 本地坐标 表示本物体相对于上一层的位置 World Coordinate 世界坐标 就是世界中的绝对位置 对应的Unity。就是localPosition 和position的关系 从Local转为World，需要M矩阵(Model Matrix) View Coordinate 观察坐标 就是把Camera当作远点，场景中所有的物体做相应的平移 例如 Camera位置 0 0 3，那场景中的物体，转换为观察坐标，则每一个物体的位置都加上 0 0 -3 从....","articleStatus":0,"articlePermalink":"/articles/2021/02/20/1613795639380.html","articleImg1URL":"https://raw.githubusercontent.com/kyochow/rendering/main/LearnOpenGL/6.1_CoordinateSystem/coordinate_systems.png?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"lua 热部署简版","articleAbstractText":"Why 我们在做lua开发的时候，一般的流程  写代码，Play Unity，到我们的功能，看看效果 发现又问题，修改代码 重新 Play，运行到我们的功能，看效果 循环2 - 3  有可改进的空间吗 lua支持热部署，不需要重启unity，重新打开该界面即可 关于热部署的核心技术点 1. 监听lua文件修改 写一个配置文件，标明哪些目录是被监听的，其他项目可以使用FileSystemWatcher，但是unity项目比较简单，AssetPostprocess即可 当文件有修改，获得修改的文件路径 2. 放弃现有lua环境中已经加载过的cache 根据得到的路径，得到lua路径，并且 package.loaded['{requirePath}']=nil  3. 重新require require('{requirePath}')  PS 这里面包含的技术点  在Lua中使用require进行模块的加载，被成功加载的模块会将这个模块的引用保存到package.loaded表中；在使用require进行模块加载的时候，会首先在package.loaded表中查找，检测这个模块是否被加载过....","articleStatus":0,"articlePermalink":"/articles/2020/10/21/1603245912000.html","articleImg1URL":"https://b3logfile.com/bing/20181203.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}